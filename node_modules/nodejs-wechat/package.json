{
  "name": "nodejs-wechat",
  "version": "0.0.8",
  "description": "nodejs wrapper of wechat(weixin) api - well tested and bug-free",
  "main": "index.js",
  "scripts": {
    "test": "mocha test -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/idy/nodejs-wechat"
  },
  "keywords": [
    "wechat",
    "weixin",
    "nodejs",
    "node"
  ],
  "author": {
    "name": "idy0013@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/idy/nodejs-wechat/issues"
  },
  "homepage": "https://github.com/idy/nodejs-wechat",
  "dependencies": {
    "require-all": "0.0.8",
    "mime": "~1.2.11"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "express-xml-parser": "0.0.3",
    "xml2js": "~0.4.2",
    "async": "~0.9.0"
  },
  "readme": "# Nodejs Wechat\n\n  [![NPM version](https://badge.fury.io/js/nodejs-wechat.png)](http://badge.fury.io/js/nodejs-wechat) [![Build Status](https://travis-ci.org/idy/nodejs-wechat.svg?branch=master)](https://travis-ci.org/idy/nodejs-wechat)\n\nNodejs wrapper of wechat api\n\n### __Usage__\n#### Work with native http server\n```javascript\nvar http = require('http');\nvar xmlBodyParser = require('express-xml-parser');\nvar Wechat = require('nodejs-wechat');\n\nvar opt = {\n  token: 'TOKEN',\n  url: '/'\n};\nvar parse = xmlBodyParser({\n  type: 'text/xml'\n});\nvar wechat = new Wechat(opt);\nwechat.on('event.subscribe', function(session) {\n  session.replyTextMsg('欢迎您关注我们的订阅号');\n});\nvar server = http.createServer(function(req, res) {\n  if (req.method === 'GET') {\n    wechat.verifyRequest(req, res);\n  } else {\n    parse(req, res, function(err) {\n      if (err) {\n        res.end();\n        return;\n      }\n      wechat.handleRequest(req, res);\n    });\n  }\n});\nserver.listen(80);\n```\n\n#### Work with express\n```javascript\nvar express = require('express');\nvar app = express();\nvar middlewares = require('express-middlewares-js');\napp.use('/weixin', middlewares.xmlBodyParser({\n  type: 'text/xml'\n}));\n\n/*\n  Alternative way\n\nvar xmlBodyParser = require('express-xml-parser');\napp.use('/weixin', xmlBodyParser({\n  type: 'text/xml',\n  limit: '1mb'\n}));\n\n*/\n\nvar Wechat = require('nodejs-wechat');\nvar opt = {\n  token: token,\n  url: '/weixin'\n};\nvar wechat = new Wechat(opt);\n\napp.get('/weixin', wechat.verifyRequest.bind(wechat));\napp.post('/weixin', wechat.handleRequest.bind(wechat));\n\n// you can also work with other restful routes\napp.use('/api', middlewares.bodyParser());\n\nwechat.on('text', function(session) {\n  session.replyTextMsg('Hello World');\n});\nwechat.on('image', function(session) {\n  session.replyNewsMsg([{\n    Title: '新鲜事',\n    Description: '点击查看今天的新鲜事',\n    PicUrl: 'http://..',\n    Url: 'http://..'\n  }]);\n});\nwechat.on('voice', function(session) {\n  session.replyMsg({\n    Title: 'This is Music',\n    MsgType: 'music',\n    Description: 'Listen to this music and guess ths singer',\n    MusicUrl: 'http://..',\n    HQMusicUrl: 'http://..',\n    ThumbMediaId: '..'\n  });\n});\n\napp.listen(80);\n```\n\n> __NOTE__: We apply `{ type: 'text/xml' }` to `xmlBodyParser` as weixin server \nsend us a `text/xml` content type instead of `application/xml`.\n\n### __API__\n#### Wechat\n- `#verifyRequest(req, res)`\n  > This is a express/connect middleware, which verify the signature of\n  request from weixin server\n\n- `#handleRequest(req, res)`\n  > This is a express/connect middleware, which handle the request post from \n  weixin server\n\n- `#on(msgType, handler)`\n  > Wechat is an inheritance from event.EventEmitter. Wechat will emit an event\n  in incoming message's `MsgType`, with a `Session` as parameter. Valid events: \n  >\n  > `text`, `image`, `voice`, `video`, `location`, `link`, `event.subscribe`, \n  `event.unsubscribe`, `event.SCAN`, `event.LOCATION`, `event.CLICK`, `event.VIEW`,\n  `error`\n  >\n  > __References__: [接收普通消息](http://mp.weixin.qq.com/wiki/index.php?title=%E6%8E%A5%E6%94%B6%E6%99%AE%E9%80%9A%E6%B6%88%E6%81%AF \"接收普通消息\"), \n  [接收事件推送](http://mp.weixin.qq.com/wiki/index.php?title=%E6%8E%A5%E6%94%B6%E4%BA%8B%E4%BB%B6%E6%8E%A8%E9%80%81 \"接收事件推送\")\n\n#### Session\n- `incomingMessage`\n  > This is a direct parse of weixin server request\n\n```xml\n<xml>\n<ToUserName><![CDATA[toUser]]></ToUserName>\n<FromUserName><![CDATA[FromUser]]></FromUserName>\n<CreateTime>123456789</CreateTime>\n<MsgType><![CDATA[event]]></MsgType>\n<Event><![CDATA[subscribe]]></Event>\n</xml>\n```\nBecomes\n```json\n{\n  \"ToUserName\": \"toUser\",\n  \"FromUserName\": \"FromUser\",\n  \"CreateTime\": \"123456789\",\n  \"MsgType\": \"event\",\n  \"Event\": \"subscribe\"\n}\n```\n\n- `req` \n  > This is the request from weixin server\n\n- `res`\n  > This is the response to weixin server\n\n- `#replyMsg(msgObject)`\n  > Reply a message via `this.res`\n\n- `#replyTextMessage(content)`\n  > Reply a text message\n\n- `#replyNewsMessage(articles)`\n  > Reply a news messages.\n\n### TODO\n- Advanced interfaces\n  > Will finish advanced interfaces before July/2014, welcome send pull requests :)\n",
  "readmeFilename": "README.md",
  "_id": "nodejs-wechat@0.0.8",
  "_shasum": "7a6be09070fbf57f52eb65563cdaf44873165268",
  "_from": "nodejs-wechat@",
  "_resolved": "https://registry.npmjs.org/nodejs-wechat/-/nodejs-wechat-0.0.8.tgz"
}
